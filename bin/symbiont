#!/usr/bin/env php
<?php
/**
 * This file is part of the Symbiont package.
 *
 * (c) Jan-Marten de Boer <symbiont@janmarten.name>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symbiont\Test;

require_once __DIR__ . '/autoload.php';

use SplFileObject;
use Symbiont\Language\Tokenizer\Context\TokenContextFormatter;
use Symbiont\Language\Tokenizer\ContextAwareExceptionInterface;
use Symbiont\Language\Tokenizer\UnexpectedEndOfStreamException;
use Symbiont\Language\Tokenizer\UnexpectedTokenSequenceException;
use Throwable;

if ($argc < 2) {
    echo 'Missing file argument.' . PHP_EOL;
    exit(1);
}

$mode = getenv('SYMBIONT_MODE') ?: 'parse';
$file = new SplFileObject($argv[1], 'r');

$exceptionFormatter = function (Throwable $exception): void {
    if (getenv('SYMBIONT_VERBOSE')) {
        fwrite(
                STDERR,
            get_class($exception) . ':' . PHP_EOL
            . $exception->getTraceAsString() . PHP_EOL . PHP_EOL
        );
    }

    fwrite(STDERR, $exception->getMessage() . PHP_EOL);
};

try {
    /** @noinspection PhpIncludeInspection */
    $consumer = require __DIR__ . '/consumer/' . basename($mode) . '.php';

    /** @noinspection PhpIncludeInspection */
    $exporter = require __DIR__ . '/exporter/' . basename($mode) . '.php';

    $exporter($consumer($file));
} catch (ContextAwareExceptionInterface $exception) {
    $exceptionFormatter($exception);

    $context = $exception->getContext();

    if ($context !== null) {
        $formatter = new TokenContextFormatter(5);
        fwrite(STDERR, PHP_EOL . $formatter($context) . PHP_EOL);
    }

    while ($exception = $exception->getPrevious()) {
        if ($exception instanceof UnexpectedTokenSequenceException) {
            continue;
        }

        fwrite(STDERR, PHP_EOL . '[_] ' . $exception->getMessage() . PHP_EOL);
    }

    exit(1);
} catch (UnexpectedEndOfStreamException $exception) {
    $exceptionFormatter($exception);

    exit(2);
} catch (Throwable $exception) {
    fwrite(STDERR, 'Language error: ');
    $exceptionFormatter($exception);

    exit(3);
}
