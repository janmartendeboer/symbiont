#!/usr/bin/env php
<?php
/**
 * This file is part of the Symbiont package.
 *
 * (c) Jan-Marten de Boer <symbiont@janmarten.name>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symbiont\Test;

require_once __DIR__ . '/autoload.php';

use SplFileObject;
use Symbiont\Language\Ast\Node\FunctionNode;
use Symbiont\Language\Ast\Node\NodeInterface;
use Symbiont\Language\Parser\ParseContextInterface;
use Symbiont\Language\Parser\Parser;
use Symbiont\Language\Parser\Symbol\Assignment;
use Symbiont\Language\Parser\Symbol\Literal;
use Symbiont\Language\Parser\Symbol\Name;
use Symbiont\Language\Parser\Symbol\Prefix;
use Symbiont\Language\Parser\Symbol\Statement;
use Symbiont\Language\Parser\Symbol\Symbol;
use Symbiont\Language\Parser\Symbol\SymbolInterface;
use Symbiont\Language\Parser\Symbol\SymbolTable;
use Symbiont\Language\Tokenizer\Context\TokenContextFormatter;
use Symbiont\Language\Tokenizer\ContextAwareExceptionInterface;
use Symbiont\Language\Tokenizer\Finder\TokenFinder;
use Symbiont\Language\Tokenizer\Strategy\CommentStrategy;
use Symbiont\Language\Tokenizer\Strategy\NumberStrategy;
use Symbiont\Language\Tokenizer\Strategy\SymbolStrategy;
use Symbiont\Language\Tokenizer\Strategy\VariableStrategy;
use Symbiont\Language\Tokenizer\Strategy\WhitespaceStrategy;
use Symbiont\Language\Tokenizer\StatelessTokenizer;
use Symbiont\Language\Tokenizer\Optimizer\TokenOptimizer;
use Symbiont\Language\Tokenizer\TokenStream;
use Symbiont\Language\Tokenizer\UnexpectedEndOfStreamException;
use Symbiont\Language\Tokenizer\UnexpectedTokenSequenceException;
use Throwable;

if ($argc < 2) {
    echo 'Missing file argument.' . PHP_EOL;
    exit(1);
}

$file      = new SplFileObject($argv[1], 'r');
$tokenizer = require __DIR__ . '/../lang/tokenizer.php';
$parser    = require __DIR__ . '/../lang/parser.php';

$exceptionFormatter = function (Throwable $exception): void {
    if (getenv('VERBOSE')) {
        echo get_class($exception) . ':' . PHP_EOL;
        echo $exception->getTraceAsString() . PHP_EOL . PHP_EOL;
    }

    echo $exception->getMessage() . PHP_EOL;
};

try {
    $statements = $parser(
        new TokenStream($tokenizer($file))
    );

    echo json_encode(
        $statements,
        JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE
    ) . PHP_EOL;
} catch (ContextAwareExceptionInterface $exception) {
    $exceptionFormatter($exception);

    $context = $exception->getContext();

    if ($context !== null) {
        $formatter = new TokenContextFormatter(5);
        echo PHP_EOL . $formatter($context) . PHP_EOL;
    }

    while ($exception = $exception->getPrevious()) {
        if ($exception instanceof UnexpectedTokenSequenceException) {
            continue;
        }

        echo PHP_EOL . '[_] ' . $exception->getMessage() . PHP_EOL;
    }

    exit(1);
} catch (UnexpectedEndOfStreamException $exception) {
    $exceptionFormatter($exception);

    exit(2);
} catch (Throwable $exception) {
    echo 'Language error: ';
    $exceptionFormatter($exception);

    exit(3);
}
